!function(){"use strict";angular.module("otus.validation",[])}(),function(){"use strict";function ValidationService(ValidationPoolService){function initPool(){ValidationPoolService.initPool()}function resetPool(){ValidationPoolService.initPool()}function registerElement(elementRegister){ValidationPoolService.persist(elementRegister)}function unregisterElement(elementRegister){ValidationPoolService.remove(elementRegister)}function validateElement(){}function validateAllElements(){var allElements=ValidationPoolService.fetchAll();allElements.forEach(function(element,index,array){element.runAllValidators()})}var self=this;self.registerElement=registerElement,self.unregisterElement=unregisterElement,self.validateElement=validateElement,self.validateAllElements=validateAllElements,self.initPool=initPool,self.resetPool=resetPool}angular.module("otus.validation").service("ValidationService",ValidationService),ValidationService.$inject=["ValidationPoolService"]}(),function(){"use strict";function ValidationHubService(MandatoryValidatorService,DistinctValidatorService,FutureDateValidatorService,DateInValidatorService,LowerLimitValidatorService,MaxDateValidatorService,MaxLengthValidatorService,MaxTimeValidatorService,MinDateValidatorService,MinLengthValidatorService,MinTimeValidatorService,PastDateValidatorService,UpperLimitValidatorService){var self=this;self.validators={mandatory:MandatoryValidatorService,"in":MandatoryValidatorService,distinct:DistinctValidatorService,"future-date":FutureDateValidatorService,"date-in":DateInValidatorService,"lower-limit":LowerLimitValidatorService,"max-date":MaxDateValidatorService,"max-length":MaxLengthValidatorService,"max-time":MaxTimeValidatorService,"min-date":MinDateValidatorService,"min-length":MinLengthValidatorService,"min-time":MinTimeValidatorService,"past-date":PastDateValidatorService,"upper-limit":UpperLimitValidatorService}}angular.module("otus.validation").service("ValidationHubService",ValidationHubService),ValidationHubService.$inject=["MandatoryValidatorService","DistinctValidatorService","FutureDateValidatorService","DateInValidatorService","LowerLimitValidatorService","MaxDateValidatorService","MaxLengthValidatorService","MaxTimeValidatorService","MinDateValidatorService","MinLengthValidatorService","MinTimeValidatorService","PastDateValidatorService","UpperLimitValidatorService"]}(),function(){"use strict";function ValidationPoolService(){function initPool(){self.pool=[]}function persist(elementRegister){self.pool.push(elementRegister)}function remove(idElementRegister){self.pool.forEach(function(element,index,array){element.id===idElementRegister&&self.pool.remove(index)})}function fetch(idElementRegister){self.pool.forEach(function(element,index,array){return element.id===idElementRegister?element:void 0})}function fetchAll(){return self.pool}var self=this;self.persist=persist,self.remove=remove,self.fetch=fetch,self.fetchAll=fetchAll,initPool()}angular.module("otus.validation").service("ValidationPoolService",ValidationPoolService)}(),function(){"use strict";function DateInValidatorService(ValidationResponseFactory){function execute(model,data){var result=data.initial<model&&model<data.end;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("DateInValidatorService",DateInValidatorService),DateInValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function DistinctValidatorService(ValidationResponseFactory){function execute(model,data){var result=model!=data.reference;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("DistinctValidatorService",DistinctValidatorService),DistinctValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function FutureDateValidatorService(ValidationResponseFactory){function execute(model,data){var result=model>new Date;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("FutureDateValidatorService",FutureDateValidatorService),FutureDateValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function LowerLimitValidatorService(ValidationResponseFactory){function execute(model,data){var result=model>data.reference;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("LowerLimitValidatorService",LowerLimitValidatorService),LowerLimitValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MandatoryValidatorService(ValidationResponseFactory){function execute(model,data){var result=!("undefined"==typeof model||0==model.length);return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MandatoryValidatorService",MandatoryValidatorService),MandatoryValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MaxDateValidatorService(ValidationResponseFactory){function execute(model,data){var result=model<=data.reference;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MaxDateValidatorService",MaxDateValidatorService),MaxDateValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MaxLengthValidatorService(ValidationResponseFactory){function execute(model,data){var result=model.length<=data.size;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MaxLengthValidatorService",MaxLengthValidatorService),MaxLengthValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MaxTimeValidatorService(ValidationResponseFactory){function execute(model,data){return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MaxTimeValidatorService",MaxTimeValidatorService),MaxTimeValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MinDateValidatorService(ValidationResponseFactory){function execute(model,data){var result=model>=data.reference;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MinDateValidatorService",MinDateValidatorService),MinDateValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MinLengthValidatorService(ValidationResponseFactory){function execute(model,data){var result=model.length>=data.size;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MinLengthValidatorService",MinLengthValidatorService),MinLengthValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function MinTimeValidatorService(ValidationResponseFactory){function execute(model,data){return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("MinTimeValidatorService",MinTimeValidatorService),MinTimeValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function PastDateValidatorService(ValidationResponseFactory){function execute(model,data){var result=model<new Date;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("PastDateValidatorService",PastDateValidatorService),PastDateValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function UpperLimitValidatorService(ValidationResponseFactory){function execute(model,data){var result=model<data.reference;return ValidationResponseFactory.create(model,data,result)}var self=this;self.execute=execute}angular.module("otus.validation").service("UpperLimitValidatorService",UpperLimitValidatorService),UpperLimitValidatorService.$inject=["ValidationResponseFactory"]}(),function(){"use strict";function ElementRegisterFactory(ValidatorFactory){function create(id,model){return new ElementRegister(id,model,ValidatorFactory)}var self=this;return self.create=create,self}function ElementRegister(id,model,ValidatorFactory){function addValidator(name,data){var validator=ValidatorFactory.create(name,data,self.model);self.validators.push(validator)}function runAllValidators(callback){var response=[];self.validators.forEach(function(element,index,array){response.push(element.execute())}),callback(response)}var self=this;self.id=id,self.model=model,self.validators=[],self.addValidator=addValidator,self.runAllValidators=runAllValidators}angular.module("otus.validation").factory("ElementRegisterFactory",ElementRegisterFactory),ElementRegisterFactory.$inject=["ValidatorFactory"]}(),function(){"use strict";function ValidationResponseFactory(){function create(reference,data,result){return new ValidationResponse(reference,data,result)}var self=this;return self.create=create,self}function ValidationResponse(reference,data,result){var self=this;self.name={},self.reference=reference,self.data=data,self.result=result}angular.module("otus.validation").factory("ValidationResponseFactory",ValidationResponseFactory)}(),function(){"use strict";function ValidatorFactory(ValidationHubService){function create(name,data,model){return new Validator(name,data,model,ValidationHubService)}var self=this;return self.create=create,self}function Validator(name,data,model,ValidationHubService){function execute(){if(self.status){var validationResponse=ValidationHubService.validators[self.name].execute(model,self.data);return validationResponse.name=self.name,validationResponse}}var self=this;self.name=name,self.status=!0,self.data=data,self.execute=execute}angular.module("otus.validation").factory("ValidatorFactory",ValidatorFactory),ValidatorFactory.$inject=["ValidationHubService"]}();